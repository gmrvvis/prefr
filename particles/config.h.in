#define particles_VERSION_MAJOR @particles_VERSION_MAJOR@
#define particles_VERSION_MINOR @particles_VERSION_MINOR@
#define particles_VERSION_PATCH @particles_VERSION_PATCH@
#define particles_VERSION @particles_VERSION@

#define particles_WITH_CUDA @particles_WITH_CUDA@

#pragma once

#define GLM_FORCE_RADIANS

#if (particles_WITH_CUDA == 1)
  #include <cuda.h>
#endif

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/matrix_inverse.hpp>
#include <glm/gtc/type_ptr.hpp>



#include <iostream>

#define degreesToRadians( degrees ) ( ( degrees ) / 180.0 * M_PI )
#define radiansToDegrees( radians ) ( ( radians ) * ( 180.0 / M_PI ) )

#define WINDOW_TITLE "Particle Engine - Splatting"
#define OGLVER 3
#define OGLSUBVER 3
#define BG_COLOR 0.86f, 0.823f, 0.823f, 1.0f
#define SCREEN_SIZE 800, 600

//#define fov 60.0f
#define fov 1.05f
#define defaultAspect 1.0f
#define nearPlane 0.3f
#define	farPlane 20000.0f

#include <vector>
#include <particles/Particle.h>
#include <particles/ElementCollection.hpp>
#include <particles/InterpolationSet.hpp>

namespace particles
{
  typedef particles::Particle tparticle;
  typedef tparticle* tparticle_ptr;
  typedef std::vector<tparticle_ptr> tparticleContainer;
  typedef utils::ElementCollection<tparticle> ParticleCollection;



}

// Use this to debug a single particle (surprisely not working after all)
//#define PARTICLE_DEBUG
