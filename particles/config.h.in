#define particles_VERSION_MAJOR @particles_VERSION_MAJOR@
#define particles_VERSION_MINOR @particles_VERSION_MINOR@
#define particles_VERSION_PATCH @particles_VERSION_PATCH@
#define particles_VERSION @particles_VERSION@

#define particles_WITH_CUDA @particles_WITH_CUDA@

#pragma once

#define GLM_FORCE_RADIANS

#ifdef WIN32
#define _USE_MATH_DEFINES
#include <cmath>
#endif

#include <algorithm>

#if (particles_WITH_CUDA == 1)
  #include <cuda.h>
#endif

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/matrix_inverse.hpp>
#include <glm/gtc/type_ptr.hpp>



#include <iostream>

#include <vector>
#include <particles/Particle.h>
#include <particles/ElementCollection.hpp>
#include <particles/InterpolationSet.hpp>

#ifdef WIN32
//	template<typename T>
//	T const & clamp (T const & val_, T const & min_, T const & max_)
//	{
//		return std::max (min_, std::min(max_, val_));
//	}
#endif

namespace particles
{
  typedef particles::Particle tparticle;
  typedef tparticle* tparticle_ptr;
  typedef std::vector<tparticle_ptr> tparticleContainer;
  typedef utils::ElementCollection<tparticle> ParticleCollection;

}


#ifdef DEBUG
  #define PARTICLES_LOG( msg )                                   \
    std::cerr << "particles "                                    \
              << __FILE__ << "("                                 \
              << __LINE__ << "): "                               \
              << msg << std::endl;
#else
  #define PARTICLES_LOG( msg ) 
#endif


#define PARTICLES_THROW( msg )                                    \
  {                                                               \
    PARTICLES_LOG( msg );          				  \
    throw std::runtime_error( msg );				  \
  }


#define particles_LIBRARY_BASE_PATH "@particles_LIBRARY_BASE_PATH@"
