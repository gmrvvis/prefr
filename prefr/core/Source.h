/*
 * Copyright (c) 2014-2018 GMRV/URJC.
 *
 * Authors: Sergio Galindo <sergio.galindo@urjc.es>
 *
 * This file is part of PReFr <https://gmrv.gitlab.com/nsviz/prefr>
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License version 3.0 as published
 * by the Free Software Foundation.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 */
#ifndef __PREFR__SOURCE__
#define __PREFR__SOURCE__

#include <prefr/api.h>

#include "../utils/types.h"
#include "../utils/Timer.hpp"

#include "Particles.h"
#include "Cluster.h"
#include "Sampler.h"
#include "UpdateConfig.h"


namespace prefr
{

  class Cluster;
  class Sampler;

  class SampledValues
  {
  public:

    glm::vec3 position;
    glm::vec3 direction;
    glm::mat4 rotation;
  };

  /*! \class Source
   *
   * \brief This class provides the base for the emission of particles for
   * a Cluster object.
   *
   * This class provides the base for the emission of particles for
   * a Cluster object. The Cluster object uses a Source object for handling
   * the emission according to the emission rate with the position, direction
   * and rotation generated by the given Sampler. Emission can be set to
   * be repeated indefinitely or to a certain number of cycles.
   *
   * Note: Reimplement this class to create a different behavior.
   *
   */
  class Source
  {
    friend class ParticleSystem;
    friend class Cluster;
    friend class Updater;

  public:

    PREFR_API
    Source( float emissionRate,
            const glm::vec3& position,
            Sampler* sampler = nullptr );

    PREFR_API
    virtual ~Source( void );

    ParticleCollection& particles( void );

    PREFR_API virtual bool active( );
    PREFR_API virtual bool emits( ) const;
    PREFR_API virtual bool continuing( ) const;
    PREFR_API virtual bool finished( );
    PREFR_API virtual void restart( );

    PREFR_API virtual const int& budget( );
    PREFR_API virtual void prepareFrame( const float& deltaTime );
    PREFR_API virtual void closeFrame( );

    PREFR_API virtual void increaseAlive( );
    PREFR_API virtual void checkEmissionEnd( );

    PREFR_API virtual void maxEmissionCycles( unsigned int cycles );

    PREFR_API void sampler( Sampler* sampler );
    PREFR_API const Sampler* sampler( void ) const;

    PREFR_API glm::vec3 position( void ) const;
    PREFR_API void sample( SampledValues* ) const;

    PREFR_API unsigned int aliveParticles( void ) const;

  protected:

    virtual void _initializeParticles( void );
    virtual void _prepareParticles( void );

    ParticleCollection _particles;
    UpdateConfig* _updateConfig;

    Sampler* _sampler;

    glm::vec3 _position;

    unsigned int _particlesToEmit;
    unsigned int _aliveParticles;

    float _emissionRate;

    float _emissionAcc;
    int _particlesBudget;
    bool _active;
    bool _continueEmission;
    bool _finished;

    bool _autoDeactivateWhenFinished;

    bool _killParticlesIfInactive;

    int _lastFrameAliveParticles;

    unsigned int _emittedParticles;
    unsigned int _maxEmissionCycles;
    unsigned int _currentCycle;

  };

  typedef VectorizedSet< Source* > SourcesArray;

  /*! \class TimedSource
   *
   * \brief This class provides the feature of emitting within a time frame.
   *
   * This class adds the base Source the feature of establishing a
   * time frame in which particles will be emitted. This time window will be
   * restarted after finishing, allowing to emit repeatedly according to the
   * set period.
   *
   * @see utils::SingleFrameTimer
   * @see Source
   *
   */
  class TimedSource : public Source, public utils::SingleFrameTimer
  {
  public:

    PREFR_API TimedSource( float emissionRate_, glm::vec3 position_ );
    PREFR_API TimedSource( float emissionRate_, glm::vec3 position_,
                           float period, float offset, float duration );

    PREFR_API virtual bool emits( ) const;

    PREFR_API virtual void checkEmissionEnd( );

    PREFR_API virtual void prepareFrame( const float& deltaTime );
    PREFR_API virtual void closeFrame( );

  };

}


#endif /* __PREFR__SOURCE__ */
